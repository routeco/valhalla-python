import os
import re
import sys
import time
import platform
import subprocess
from pathlib import Path
from distutils import sysconfig
from sysconfig import get_paths
import multiprocessing as mp
from shutil import rmtree

from setuptools import setup, Extension
from setuptools.command.build_ext import build_ext
from setuptools.command.sdist import sdist as orig_sdist
from distutils.version import LooseVersion

BASEDIR = Path(__file__).parent.absolute()
CONFIG = sysconfig.get_config_vars()
PY_MAJMIN = '@Python_VERSION_MAJOR@@Python_VERSION_MINOR@'


class CMakeExtension(Extension):
    sourcedir = Path(BASEDIR).absolute()

    def __init__(self, name):
        super().__init__(name, [])


def get_python_lib():
    return Path("{}/{}".format(CONFIG['LIBDIR'], CONFIG['LDLIBRARY']))


def get_python_include():
    return get_paths()['platinclude']


class CMakeBuild(build_ext):
    def run(self):
        try:
            out = subprocess.check_output(['cmake', '--version'])
        except OSError:
            raise RuntimeError("CMake must be installed to build the following extensions: " +
                               ", ".join(e.name for e in self.extensions))

        if platform.system() == "Windows":
            cmake_version = LooseVersion(re.search(r'version\s*([\d.]+)', out.decode()).group(1))
            if cmake_version < '3.12.0':
                raise RuntimeError("CMake >= 3.12.0 is required on Windows")

        for ext in self.extensions:
            self.build_extension(ext)

    def build_extension(self, ext: Extension):
        extdir = Path(self.get_ext_fullpath(ext.name)).parent.resolve()

        tmp_path = Path(self.build_temp)
        if not tmp_path.exists():
            tmp_path.mkdir()

        if Path(tmp_path / 'CMakeFiles').exists():
            rmtree(str(tmp_path / 'CMakeFiles'))
        if Path(tmp_path / 'CMakeCache.txt').exists():
            os.remove(str(tmp_path / 'CMakeCache.txt'))
            
        # TODO: we need to remove all previously generated shared libraries from the build folder!

        cmake_args = ['-DCMAKE_LIBRARY_OUTPUT_DIRECTORY={}'.format(extdir),
                      '-DPython_EXECUTABLE={}'.format(sys.executable),
                      '-DPython_INCLUDE_DIRS={}'.format(get_python_include()),
                      '-DPython_LIBRARIES={}'.format(get_python_lib()),
                      '-DENABLE_BENCHMARKS=OFF',
                      '-DENABLE_TESTS=OFF',
                      '-DENABLE_TOOLS=OFF',
                      '-DENABLE_SERVICES=OFF',
                      '-DENABLE_CCACHE=OFF',
                      '-DENABLE_BENCHMARKS=OFF']
        cfg = 'Debug' if self.debug else 'Release'
        build_args = ['--config', cfg]
        cmake_args += ['-DCMAKE_BUILD_TYPE=' + cfg]

        cpu_count = mp.cpu_count() if mp.cpu_count() < 4 else mp.cpu_count() - 1
        build_args += ['--', "-j{}".format(cpu_count)]

        env = os.environ.copy()

        if env.get('LUA_INCLUDE_DIR'):
            cmake_args += ['-DLUA_INCLUDE_DIR={}'.format(env['LUA_INCLUDE_DIR'])]

        subprocess.check_call(['cmake', '-GNinja', '-S{}'.format(ext.sourcedir), '-B{}'.format(tmp_path)] + cmake_args, cwd=str(tmp_path), env=env)
        subprocess.check_call(['cmake', '--build', str(tmp_path)] + build_args, cwd=str(tmp_path))

if sys.version_info < (3,5):
    raise RuntimeError("Python 3.5 or larger required.")

setup(
    ext_modules=[CMakeExtension('python_valhalla')],
    packages=['valhalla'],
    package_data={'valhalla': ['*.dll', '*.so', '*.dynlib']},
    python_requires=">=3.5",
    cmdclass=dict(build_ext=CMakeBuild, sdist=orig_sdist),
    zip_safe=False,
)
